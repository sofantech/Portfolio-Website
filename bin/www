#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('portfolioproject:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io =require('socket.io')(server);
const Msg=require('../models/messages');

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
io.on('connection',(socket)=>{
  // console.log('a user connected');
  // socket.emit('message','hello world');
  // socket.on('disconnect',()=>{
  //   console.log('user disconnected');

  // });
  socket.on('send-message',({uname},{uemail},{usubject},{umessage})=>{
    const message=new Msg({
          senderName:uname,
          senderEmail:uemail,
          subject:usubject,
          description:umessage,
    
        });
        message.save((error,result)=>{
              if (error) {
                console.log(error);
                
                
                return;
                
              }
              console.log(result);
              
          
        });
    console.log(uname,uemail,usubject,umessage);
    
    socket.emit('send-message',{uname},{uemail},{usubject},{umessage});

  })

  // socket.on('chatmessage',(name,email,subject,msg)=>{
  //   const message=new Msg({
  //     senderName:name,
  //     senderEmail:email,
  //     subject:subject,
  //     description:msg,

  //   });
  //   message.save((error,result)=>{
  //     if (error) {
  //       console.log(error);
  //       // res.redirect('skills');
        
  //       return;
        
  //     }
  //     console.log(result);
  //     req.flash('message','save success');
  //     res.redirect('index');
      
  
  //   });

  // })
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
